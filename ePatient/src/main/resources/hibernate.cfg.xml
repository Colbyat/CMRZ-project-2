<?xml version="1.0" encoding="UTF-8"?>
<!-- When using Hibernate, we must first configure Hibernate. We typically 
	do so within a configuration file like this (which is conventionally called 
	hibernate.cfg.xml). We also have the option of doing an entirely class based 
	configuration for Hibernate. -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<!-- Root tag of a hibernate configuration file. -->
<hibernate-configuration>
	<!-- Inside of this tag, we can find configuration properties for Hibernate 
		such as our database URL, our database user credentials, information about 
		whether or not Hibernate logs SQL queries to the console, information about 
		the dialect of SQL that we're using, information about the location of our 
		mapped resources. We'll specify many of these properties inside of a session-factory 
		tag. A session factory provides pre-configured sessions throughout your application. 
		All work on a database is done within the context of a session. -->
	<session-factory>
		<!-- This properties specifies our Driver class. -->
		<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
		<!-- We should also specify the dialect of SQL that we're using. -->
		<property name="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
		<!-- Specify your database credentials! Note that you should not actually place your credentials
		here.-->
		<property name="hibernate.connection.url"></property>
		<property name="hibernate.connection.username"></property>
		<property name="hibernate.connection.password"></property>
		<!-- This property allows us to see the SQL queries generated by Hibernate in the console. -->
		<property name="show_sql">true</property>
		<!-- This determines how many connections a single user is allowed to your DB. -->
		<property name="hibernate.connection.pool_size">5</property>
		<!-- This property defines how Hibernate sessions are handled. In this case, sessions are
		tracked by their thread of execution. -->
		<property name="hibernate.current_session_context_class">thread</property>
		<!-- We can run Hibernate in four different modes: create, update, create-drop, and validate.
		
		create: Hibernate will purge the existing database and create it from scratch.
		
		update: Hibernate will connect to an existing database and interact with it without purging
		the database. It will update any entities within our database that are not consistent with
		our mapped Java models.
		
		create-drop: Hibernate creates all of the tables and then drops them when the application
		stops running. This is good for testing purposes but not ideal in production.
		
		validate: Hibernate will validate a pre-existing schema. This means that it will make sure
		that your Java models are mapped in a way that is consistent with the existing schema. -->
		<property name="hibernate.hbm2ddl.auto">update</property>
		
		<!-- We need to tell Hibernate where the mapped resources are;
		it doesn't autodetect the resources. -->
		<mapping class="com.revature.model.Medication"/>

	</session-factory>
</hibernate-configuration>
